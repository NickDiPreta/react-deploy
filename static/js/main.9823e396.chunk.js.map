{"version":3,"sources":["data.js","nav.js","CardsGen.js","MultiCard.js","CardsContent.js","BottomContent.js","App.js","serviceWorker.js","index.js"],"names":["staticDashboardData","reviewsData","averageRatingData","sentimentAnalysisData","websiteVisitorsData","navItems","NavBar","props","content","map","item","CardsGen","MultiCard","CardsContent","className","id","BottomContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAUeA,G,cATX,CACIC,YAAY,QACZC,kBAAkB,MAClBC,sBAAsB,CAAC,MAAM,MAAM,OACnCC,oBAAoB,MACpBC,SAAS,CAAC,YAAY,SAAS,UAAU,YAAY,kBAAkB,c,OCQhEC,MATf,SAAgBC,GAEZ,OACI,6BACCA,EAAMC,QAAQC,KAAI,SAAAC,GAAI,OAAG,4BAAKA,QCAxBC,MAPf,SAAkBJ,GAEd,OACI,2BAAIA,EAAMC,UCIHI,MAPf,SAAmBL,GAEf,OACI,2BAAIA,EAAMC,QAAQC,KAAI,SAAAC,GAAI,OAAG,gCAAMA,QCiB5BG,MAjBf,WAEI,OACA,yBAAKC,UAAU,aACX,yBAAKA,UAAU,SAAf,UACA,kBAAC,EAAD,CAAUN,QAASR,EAAoBC,eAEvC,yBAAKa,UAAU,SAAf,iBACA,kBAAC,EAAD,CAAUN,QAASR,EAAoBE,qBAEvC,yBAAKY,UAAU,QAAQC,GAAG,gBAA1B,qBACA,kBAAC,EAAD,CAAWP,QAASR,EAAoBG,2BCLjCa,MARf,SAAuBT,GACnB,OACA,yBAAKO,UAAU,OAAf,mBACA,kBAAC,EAAD,CAAUN,QAASD,EAAMC,YCCd,SAASS,IACtB,OACE,yBAAKH,UAAU,iBACb,kBAAC,EAAD,CAAQN,QAASR,EAAoBK,WACrC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAeG,QAASR,EAAoBI,uBCA9Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACR,EAAD,OAEFS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9823e396.chunk.js","sourcesContent":["const staticDashboardData =\n    {\n        reviewsData:\"1,281\",\n        averageRatingData:\"4.6\",\n        sentimentAnalysisData:[\"960\",\"122\",\"321\"],\n        websiteVisitorsData:\"821\",\n        navItems:[\"Dashboard\",\"Widget\",\"Reviews\",\"Customers\",\"Online Analysis\",\"Settings\"]\n        \n    }\n\nexport default staticDashboardData;","import React from 'react'\nimport { render } from '@testing-library/react'\nimport staticDashboardData from \"./data\"\n\n\nfunction NavBar(props){\n    \n    return(\n        <nav>\n        {props.content.map(item=> <li>{item}</li>)}\n        </nav>\n    )\n}\n\nexport default NavBar","import React from 'react'\n\nfunction CardsGen(props){\n    \n    return(\n        <p>{props.content}</p>\n    )\n}\n\nexport default CardsGen","import React from 'react'\n\nfunction MultiCard(props){\n    \n    return(\n        <p>{props.content.map(item=> <li>${item}</li>)}</p>\n    )\n}\n\nexport default MultiCard","import React from 'react'\nimport staticDashboardData from \"./data.js\"\nimport CardsGen from \"./CardsGen\";\nimport MultiCard from \"./MultiCard\";\n\nfunction CardsContent(){\n    \n    return(\n    <div className=\"Top-cards\">\n        <div className=\"Cards\">Reviews\n        <CardsGen content={staticDashboardData.reviewsData}/>\n        </div>\n        <div className=\"Cards\">Average Rating\n        <CardsGen content={staticDashboardData.averageRatingData}/>\n        </div>\n        <div className=\"Cards\" id=\"centeredCard\">Sentiment Analysis\n        <MultiCard content={staticDashboardData.sentimentAnalysisData}/>\n        </div>\n    </div>\n    )\n}\n\nexport default CardsContent\n","import React from 'react'\nimport CardsGen from \"./CardsGen\"\n\nfunction BottomContent(props){\n    return(\n    <div className=\"Bot\">Website Visitors\n    <CardsGen content={props.content}/>\n    </div>\n    )\n}\n\nexport default BottomContent","import React from \"react\";\nimport \"./styles.css\";\nimport staticDashboardData from \"./data.js\"\nimport NavBar from \"./nav\"\nimport CardsContent from \"./CardsContent\"\nimport BottomContent from \"./BottomContent\"\n\nexport default function App() {\n  return (\n    <div className=\"App-container\">\n      <NavBar content={staticDashboardData.navItems}/>\n      <CardsContent />\n      <BottomContent content={staticDashboardData.websiteVisitorsData} />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}